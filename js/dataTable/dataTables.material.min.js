((factory) => {
    if (typeof define === "function" && define.amd) {
        // AMD (Asynchronous Module Definition)
        define(["jquery", "datatables.net"], (jQuery) => factory(jQuery, window, document));
    } else if (typeof exports === "object") {
        // CommonJS
        module.exports = (window, document) => {
            const jQuery = window || require("datatables.net")(window, document).$;
            return factory(jQuery, window, document);
        };
    } else {
        // Browser global
        factory(jQuery, window, document);
    }
})((jQuery, window, document, undefined) => {
    const DataTable = jQuery.fn.dataTable;

    // Extend DataTable defaults for Material Design layout
    jQuery.extend(true, DataTable.defaults, {
        dom: "<'mdl-grid'<'mdl-cell mdl-cell--6-col'l><'mdl-cell mdl-cell--6-col'f>><'mdl-grid dt-table'<'mdl-cell mdl-cell--12-col'tr>><'mdl-grid'<'mdl-cell mdl-cell--4-col'i><'mdl-cell mdl-cell--8-col'p>>",
        renderer: "material"
    });

    // Extend DataTable classes for Material Design
    jQuery.extend(DataTable.ext.classes, {
        sWrapper: "dataTables_wrapper form-inline dt-material",
        sFilterInput: "form-control input-sm",
        sLengthSelect: "form-control input-sm",
        sProcessing: "dataTables_processing panel panel-default"
    });

    // Renderer for Material Design pagination buttons
    DataTable.ext.renderer.pageButton.material = (settings, host, idx, buttons, page, pages) => {
        const api = new DataTable.Api(settings);
        const lang = settings.oLanguage.oPaginate;
        const aria = settings.oLanguage.oAria.paginate || {};
        let buttonCounter = 0;

        const attach = (container, buttons) => {
            buttons.forEach((btn) => {
                if (Array.isArray(btn)) {
                    attach(container, btn);
                } else {
                    let btnLabel, btnClass, active;
                    switch (btn) {
                        case "ellipsis":
                            btnLabel = "&#x2026;";
                            btnClass = "disabled";
                            break;
                        case "first":
                            btnLabel = lang.sFirst;
                            btnClass = btn + (page > 0 ? "" : " disabled");
                            break;
                        case "previous":
                            btnLabel = lang.sPrevious;
                            btnClass = btn + (page > 0 ? "" : " disabled");
                            break;
                        case "next":
                            btnLabel = lang.sNext;
                            btnClass = btn + (page < pages - 1 ? "" : " disabled");
                            break;
                        case "last":
                            btnLabel = lang.sLast;
                            btnClass = btn + (page < pages - 1 ? "" : " disabled");
                            break;
                        default:
                            btnLabel = btn + 1;
                            btnClass = "";
                            active = page === btn;
                    }

                    // Use appropriate button style
                    const buttonElement = jQuery(
                        active
                            ? `<md-filled-button class="${btnClass}" id="${idx === 0 && typeof btn === 'string' ? settings.sTableId + '_' + btn : ''}" aria-controls="${settings.sTableId}" aria-label="${aria[btn]}" data-dt-idx="${buttonCounter}" tabindex="${settings.iTabIndex}" ${btnClass.includes("disabled") ? "disabled" : ""}>${btnLabel}</md-filled-button>`
                            : `<md-outlined-button class="${btnClass}" id="${idx === 0 && typeof btn === 'string' ? settings.sTableId + '_' + btn : ''}" aria-controls="${settings.sTableId}" aria-label="${aria[btn]}" data-dt-idx="${buttonCounter}" tabindex="${settings.iTabIndex}" ${btnClass.includes("disabled") ? "disabled" : ""}>${btnLabel}</md-outlined-button>`
                    );

                    buttonElement.appendTo(container);

                    settings.oApi._fnBindAction(buttonElement, { action: btn }, (e) => {
                        e.preventDefault();
                        if (!jQuery(e.currentTarget).hasClass("disabled") && api.page() !== e.data.action) {
                            api.page(e.data.action).draw("page");
                        }
                    });

                    buttonCounter++;
                }
            });
        };

        let activeElement;
        try {
            activeElement = jQuery(host).find(document.activeElement).data("dt-idx");
        } catch (e) {}

        attach(jQuery(host).empty().html('<div class="pagination"/>').children(), buttons);

        if (activeElement !== undefined) {
            jQuery(host).find(`[data-dt-idx=${activeElement}]`).focus();
        }
    };

    return DataTable;
});